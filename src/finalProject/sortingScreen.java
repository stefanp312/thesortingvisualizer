/*
Stefan Pleava
Humberview SS
07/05/2014
ICS4UO
Sorting Project
A program that showcases the various sorting algorithms with various data types and different amounts of data 
*/
package finalProject;

import java.awt.Color;
import java.awt.Graphics;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Stefan
 */
public class sortingScreen extends javax.swing.JFrame {
//declare variables to be used
    public static int[] bigArray;
    public static int amountToSort = 10;
    public static int algorithm = 1;
    public static int copys;
    public static int comparisions;
    private String[] args;

    /**
     * Creates new form sortingScreen
     */
    public sortingScreen() {
        //init all the gui components 
        initComponents();
        //set the icon of the window
        this.setIconImage(new ImageIcon(getClass().getResource("sort.png")).getImage());
        //set the title of the program
        this.setTitle("The Sorting Visualizer");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        legend = new javax.swing.JDialog();
        okayButton = new javax.swing.JButton();
        legendLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        progressLabel = new javax.swing.JLabel();
        delaySlider = new javax.swing.JSlider();
        speedLabel = new javax.swing.JLabel();
        sortButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        algoSelect = new javax.swing.JComboBox();
        legendButton = new javax.swing.JButton();
        copiesLabel = new javax.swing.JLabel();
        comparisionsLabel = new javax.swing.JLabel();
        tempLabel = new javax.swing.JLabel();
        sortScreenMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        menuSize = new javax.swing.JMenuItem();
        legendMenu = new javax.swing.JMenuItem();

        legend.setMinimumSize(new java.awt.Dimension(220, 200));
        legend.setResizable(false);

        okayButton.setText("Okay");
        okayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okayButtonActionPerformed(evt);
            }
        });

        legendLabel.setText("Legend");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalProject/legend.jpg"))); // NOI18N

        javax.swing.GroupLayout legendLayout = new javax.swing.GroupLayout(legend.getContentPane());
        legend.getContentPane().setLayout(legendLayout);
        legendLayout.setHorizontalGroup(
            legendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(legendLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(legendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(legendLabel)
                    .addComponent(okayButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        legendLayout.setVerticalGroup(
            legendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, legendLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(legendLabel)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(okayButton)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        progressBar.setDoubleBuffered(true);

        progressLabel.setText("Working...");

        delaySlider.setMajorTickSpacing(2);
        delaySlider.setMaximum(500);
        delaySlider.setMinimum(1);
        delaySlider.setMinorTickSpacing(1);
        delaySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                delaySliderStateChanged(evt);
            }
        });

        speedLabel.setText("Delay: 50");

        sortButton.setText("Sort");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 557, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 214, Short.MAX_VALUE)
        );

        algoSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Bubble Sort", "Selection Sort", "Insertion Sort", "Quick Sort" }));
        algoSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algoSelectActionPerformed(evt);
            }
        });

        legendButton.setText("Legend");
        legendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                legendButtonActionPerformed(evt);
            }
        });

        copiesLabel.setText("Copies: ");

        comparisionsLabel.setText("Comparisions: ");

        tempLabel.setText("Temp:");

        fileMenu.setText("File");
        fileMenu.setBorderPainted(true);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Main Menu");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem3);

        sortScreenMenuBar.add(fileMenu);

        optionsMenu.setText("Options");
        optionsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsMenuActionPerformed(evt);
            }
        });

        menuSize.setText("Amount");
        menuSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSizeActionPerformed(evt);
            }
        });
        optionsMenu.add(menuSize);

        legendMenu.setText("Legend");
        legendMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                legendMenuActionPerformed(evt);
            }
        });
        optionsMenu.add(legendMenu);

        sortScreenMenuBar.add(optionsMenu);

        setJMenuBar(sortScreenMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(legendButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(delaySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(74, 74, 74)
                                .addComponent(algoSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(213, 213, 213)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(sortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(progressLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comparisionsLabel)
                            .addComponent(copiesLabel))
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(speedLabel)
                                .addGap(250, 250, 250))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(tempLabel)
                                .addGap(258, 258, 258))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(speedLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(delaySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(legendButton))
                        .addGap(41, 41, 41)
                        .addComponent(tempLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(algoSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortButton)
                    .addComponent(copiesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(progressLabel)
                    .addComponent(comparisionsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // this makes the main menu appear and closes this class
        mainScreen.main(args);
        this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void menuSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSizeActionPerformed
        // This prompts the user to enter the amount of data they want to sor        
        String input = JOptionPane.showInputDialog("Enter size(1-20): ");
        amountToSort = Integer.parseInt(input);
    }//GEN-LAST:event_menuSizeActionPerformed
    public void startThread() {
        //Creating and starting a new thread that fills an array with random data and sorts it
        fillArray(amountToSort);
        SortingThread test = new SortingThread();
        Thread sort = new Thread(test);
        sort.start();

    }

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        // On button press start the thread
        startThread();
    }//GEN-LAST:event_sortButtonActionPerformed

    private void delaySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_delaySliderStateChanged
        // When the slider is moved update it's value in the text label
        speedLabel.setText("Delay: " + delaySlider.getValue());
    }//GEN-LAST:event_delaySliderStateChanged

    private void optionsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsMenuActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_optionsMenuActionPerformed

    private void algoSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algoSelectActionPerformed
        // When the combo box has an item selected have a variable know that selection
        algorithm = (algoSelect.getSelectedIndex() + 1);
    }//GEN-LAST:event_algoSelectActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // exit the program
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void legendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_legendButtonActionPerformed
        // make the legend visible 
        legend.setVisible(true);
    }//GEN-LAST:event_legendButtonActionPerformed

    private void okayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okayButtonActionPerformed
        // hide the legend
        legend.setVisible(false);
    }//GEN-LAST:event_okayButtonActionPerformed

    private void legendMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_legendMenuActionPerformed
        // make the legend visble 
        legend.setVisible(true);
    }//GEN-LAST:event_legendMenuActionPerformed
    class SortingThread implements Runnable {
        // new class that will work as a thread and run independantly.
        // it has a switch statement that selects the type of sort and calls the appropriate method
        @Override
        public void run() {
            //adjust the temp label and call the sort.
            switch (algorithm) {
                case 1:
                    tempLabel.setText("Temp:");
                    bubbleSort(amountToSort, 1);
                    break;
                case 2:
                    tempLabel.setText("Temp:");
                    selectionSort(amountToSort, 1);
                    break;
                case 3:
                    tempLabel.setText("Temp:");
                    insertionSort(amountToSort, 1);
                    break;
                case 4:
                    //since quick sort is a recrusive function I need to do all the gui stuff outside otherwise
                    //it updates too much and flashes. Sets the text for the comparisions
                    //and copys and temp and progress.
                    progressBar.setValue(0);
                    comparisions = 0;
                    copys = 0;
                    tempLabel.setText("Pivot:");
                    quickSort(bigArray, 0, amountToSort - 1);
                    progressBar.setValue(100);
                    progressLabel.setText("Finished.");
                    showSort(99, 99, 99);
                    break;
            }
        }

    }
    //The function that partitions an array that is passed to it
    //This is used in the quick sort algorithm when it partitions the array around
    // a pivot point
    int partition(int arr[], int left, int right) {
        int i = left, j = right;
        int tmp;
        int pivot = arr[(left + right) / 2];
        progressLabel.setText("Working...");

        while (i <= j) {
            progressBar.setValue(progressBar.getValue() + 10);
            while (arr[i] < pivot) {
                i++;
                comparisions++;
            }
            while (arr[j] > pivot) {
                j--;
                comparisions++;
            }
            if (i <= j) {
                comparisions++;
                tmp = arr[i];
                copys++;
                arr[i] = arr[j];
                copys++;
                arr[j] = tmp;
                copys++;
                i++;
                j--;
                showSort(pivot, i, j);
            }
        };
        return i;
    }
    // the recursive part of the sorting algorithm where it class itself 
    //after partitioning it
    void quickSort(int arr[], int left, int right) {
        int index = partition(arr, left, right);
        if (left < index - 1) {
            quickSort(arr, left, index - 1);
        }
        if (index < right) {
            quickSort(arr, index, right);
        }
    }
    // showSort grabs the panels graphic objects, updates all the text labels
    // and then goes through all the values in the array and draws a rectangle
    // with the appropriate size and color
    
    public void showSort(int temp, int selected, int comparision) {
        Graphics g = jPanel1.getGraphics();
        copiesLabel.setText("Copies: " + copys);
        comparisionsLabel.setText("Comparisions: " + comparisions);
        g.setColor(Color.white);
        g.fillRect(0, 0, jPanel1.getWidth(), jPanel1.getHeight());
        g.setColor(Color.black);
        for (int a = 0; a < bigArray.length; a++) {
            if (bigArray[a] != temp) {
                //g.fillRect((a * 12) + (a * 20), 100, 25, bigArray[a]);
                g.fillRect(((jPanel1.getWidth() / amountToSort) * a), jPanel1.getHeight() / 2, 20, bigArray[a]);

            }
            if (bigArray[a] == temp && temp != 99) {
                g.setColor(Color.GREEN);
                //g.drawRect((a * 12) + (a * 20), 100, 25, bigArray[a]);
                g.fillRect(((jPanel1.getWidth() / amountToSort) * a), jPanel1.getHeight() / 2, 20, bigArray[a]);
                g.setColor(Color.black);
            }
            if (a == comparision && comparision != 99) {
                g.setColor(Color.red);
                //g.drawRect((a * 12) + (a * 20), 100, 25, bigArray[a]);
                g.drawRect(((jPanel1.getWidth() / amountToSort) * a), jPanel1.getHeight() / 2, 20, bigArray[a] + 5);
                g.setColor(Color.black);
            }
            if (a == selected && comparision != 99) {
                g.setColor(Color.blue);
                //g.drawRect((a * 12) + (a * 20), 100, 25, bigArray[a]);
                g.drawRect(((jPanel1.getWidth() / amountToSort) * a), jPanel1.getHeight() / 2, 20, bigArray[a] + 5);
                g.setColor(Color.black);
            }
        }
        if (99 != temp) {
            g.setColor(Color.red);
            g.fillRect(jPanel1.getWidth() / 2, 25, temp, 20);
            g.setColor(Color.black);
        }
        g.dispose();
        long delayTime = System.currentTimeMillis();
        while ((System.currentTimeMillis() - delayTime) < delaySlider.getValue()) {
        }
    }
    
    public void insertionSort(int amount, int typeOfData) {
        //This method runns the insertion sort algorithm
        // it also gives updates to all the gui components and variables for them
        progressLabel.setText("Working...");
        comparisions = 0;
        copys = 0;
        progressBar.setValue(0);
        int i, j;
        int index;

        for (i = 1; i < bigArray.length; i++) {
            index = bigArray[i];
            j = i;
            progressBar.setValue(progressBar.getValue() + 10);
            copys++;
            while ((j > 0) && (bigArray[j - 1] > index)) {
                comparisions++;
                bigArray[j] = bigArray[j - 1];
                copys++;
                j = j - 1;
                showSort(99, i, j);

            }
            bigArray[j] = index;
        }
        progressBar.setValue(100);
        progressLabel.setText("Finished.");
        showSort(99, 99, 99);
    }

    public void selectionSort(int amount, int typeOfData) {
        //This method runns the insertion sort algorithm
        // it also gives updates to all the gui components and variables for them
        progressLabel.setText("Working...");
        comparisions = 0;
        copys = 0;
        progressBar.setValue(0);
        int i, j = 0;
        int min, temp;
        temp = 0;

        for (i = 0; i < bigArray.length - 1; i++) {
            min = i;
            progressBar.setValue(progressBar.getValue() + 10);
            for (j = i + 1; j < bigArray.length; j++) {
                if (bigArray[j] < bigArray[min]) {
                    min = j;
                }
                comparisions++;
                showSort(temp, i, j);
            }
            temp = bigArray[i];
            copys++;
            bigArray[i] = bigArray[min];
            copys++;
            bigArray[min] = temp;
            copys++;
        }
        progressBar.setValue(100);
        progressLabel.setText("Finished.");
        showSort(99, 99, 99);
    }

    public void bubbleSort(int amount, int typeOfData) {
        //This method runns the bubble sort algorithm
        // it also gives updates to all the gui components and variables for them
        progressLabel.setText("Working...");
        comparisions = 0;
        progressBar.setValue(0);
        copys = 0;
        int i, j, temp, x;

        for (i = (bigArray.length - 1); i >= 0; i--) {
            progressBar.setValue(progressBar.getValue() + 10);
            for (j = 1; j <= i; j++) {
                if (bigArray[j - 1] > bigArray[j]) {
                    comparisions++;
                    temp = bigArray[j - 1];
                    copys++;
                    bigArray[j - 1] = bigArray[j];
                    copys++;
                    bigArray[j] = temp;
                    copys++;
                }
                showSort(99, j, j - 1);
            }
        }
        progressBar.setValue(100);
        progressLabel.setText("Finished.");
        showSort(99, 99, 99);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sortingScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sortingScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sortingScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sortingScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        // this is the main method which runs the program as well as sets the 
        //main window to be visible
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sortingScreen().setVisible(true);
            }
        });
    }

    public static void fillArray(int amount) {
        //this method fills an array with random data
        bigArray = new int[amount];
        for (int x = 0; x < bigArray.length; x++) {
            bigArray[x] = (int) ((Math.random() * 90) + 1);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algoSelect;
    private javax.swing.JLabel comparisionsLabel;
    private javax.swing.JLabel copiesLabel;
    private javax.swing.JSlider delaySlider;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JDialog legend;
    private javax.swing.JButton legendButton;
    private javax.swing.JLabel legendLabel;
    private javax.swing.JMenuItem legendMenu;
    private javax.swing.JMenuItem menuSize;
    private javax.swing.JButton okayButton;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JButton sortButton;
    private javax.swing.JMenuBar sortScreenMenuBar;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JLabel tempLabel;
    // End of variables declaration//GEN-END:variables
}
